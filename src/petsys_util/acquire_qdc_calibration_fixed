#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
import math
import time
import os.path

parser = argparse.ArgumentParser(description='Acquire data for QDC calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help="Data filename (prefix)")
args = parser.parse_args()

systemConfig = config.ConfigFromFile(args.config, loadMask=config.LOAD_BIAS_CALIBRATION | config.LOAD_BIAS_SETTINGS)
daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF, qdc_mode="qdc")
daqd.openRawAcquisition(args.fileNamePrefix, calMode=False)

nPhases = 3
nLengths = 1

intg_time = {}

asicsConfig = daqd.getAsicsConfig()
for ac in asicsConfig.values():

        for channel in range(0, 64):
                min = ac.channelConfig[channel].getValue("min_intg_time")
                max = ac.channelConfig[channel].getValue("max_intg_time")
                if( min != max ):
                        print("error: min: %d   max: %d") %(int(min),int(max))
                intg_time[channel] = min
                
	gc = ac.globalConfig
	for cc in ac.channelConfig:
		# Set simplest trigger_mode_2_* setting
		cc.setValue("trigger_mode_2_t", 0b00)
		cc.setValue("trigger_mode_2_e", 0b000)
		cc.setValue("trigger_mode_2_q", 0b00)
		cc.setValue("trigger_mode_2_b", 0b000)
                
		# Disable channel from triggering.
		# Will selectively enable channels below
		cc.setValue("trigger_mode_1", 0b11)

simultaneousChannels = 1

for channel in range(0, 64):
        
	# Enable triggering for active channels
	cfg = deepcopy(asicsConfig)
	for ac in cfg.values():
                ac.channelConfig[channel].setValue("trigger_mode_1", 0b01)
	daqd.setAsicsConfig(cfg)

	for phase in [float(x)/nPhases for x in range(nPhases)]:
                t_start = time.time()
                
                length = intg_time[channel]
                if( intg_time[channel] >= 16 ):
                        length = 2*intg_time[channel]-16
                if( intg_time[channel] >= 32 ):
                        length = 4*intg_time[channel]-78
                
                # @param length Sets the length of the test pulse, from 1 to 1023 clock cycles. 0 disables the test pulse.
                # @param interval Sets the interval between test pulses in clock cycles. 1024~200 kHz, 200000=1kHz, 2000000=100Hz
                # @param finePhase Defines the delay of the test pulse in clock cycles.
                # @param invert Sets the polarity of the test pulse: active low when ``True'' and active high when ``False''
                daqd.set_test_pulse_febds(length, 1024, phase, False)
                daqd.acquire(0.02, length, phase)
                t_finish = time.time()
                print "Channel(s): %s   Phase: %4.3f clk   Length: %d clk   in %3.2f seconds " % (channel, phase, length, t_finish - t_start)
                
        for ac in cfg.values():
                ac.channelConfig[channel].setValue("trigger_mode_1", 0b11)
        daqd.setAsicsConfig(cfg)
        
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)
